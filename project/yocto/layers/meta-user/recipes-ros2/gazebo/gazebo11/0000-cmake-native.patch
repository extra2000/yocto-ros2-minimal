diff --git a/CMakeLists.txt b/CMakeLists.txt
index 90780f5ca0..04c29fcef9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -380,20 +380,20 @@ else (build_errors)
   message (STATUS "Install path: ${CMAKE_INSTALL_PREFIX}")

   if (BUILD_GAZEBO)
-    add_custom_target(tests)
-    set(TEST_TYPE "UNIT")
+    #add_custom_target(tests)
+    #set(TEST_TYPE "UNIT")
     add_subdirectory(gazebo)
-    add_subdirectory(media)
-    add_subdirectory(tools)
-    add_subdirectory(plugins)
-    add_subdirectory(interfaces)
-    add_subdirectory(worlds)
-    add_subdirectory(models)
+    #add_subdirectory(media)
+    #add_subdirectory(tools)
+    #add_subdirectory(plugins)
+    #add_subdirectory(interfaces)
+    #add_subdirectory(worlds)
+    #add_subdirectory(models)

     if (BUILD_TESTING)
-      add_subdirectory(test)
+      #add_subdirectory(test)
     else()
-      add_subdirectory(test EXCLUDE_FROM_ALL)
+      #add_subdirectory(test EXCLUDE_FROM_ALL)
     endif()

   endif (BUILD_GAZEBO)
@@ -466,6 +466,6 @@ else (build_errors)
   set(PKG_LIBRARIES ${PKG_LIBRARIES}
     gazebo_client
-    gazebo_gui
+    #gazebo_gui
     gazebo_sensors
     gazebo_rendering
   )
diff --git a/cmake/GazeboTestUtils.cmake b/cmake/GazeboTestUtils.cmake
index 77f2be9ce2..f4574917c6 100644
--- a/cmake/GazeboTestUtils.cmake
+++ b/cmake/GazeboTestUtils.cmake
@@ -84,7 +84,7 @@ macro (gz_build_tests)
         --error-exitcode=1 --show-leak-kinds=all ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME})
     endif()

-    add_dependencies(tests ${BINARY_NAME})
+    #add_dependencies(tests ${BINARY_NAME})
   endforeach()

   set(GZ_BUILD_TESTS_EXTRA_EXE_SRCS "")
diff --git a/cmake/GazeboUtils.cmake b/cmake/GazeboUtils.cmake
index f1710e9e81..907d561a1b 100644
--- a/cmake/GazeboUtils.cmake
+++ b/cmake/GazeboUtils.cmake
@@ -31,16 +31,16 @@ ENDMACRO (APPEND_TO_SERVER_SOURCES)

 ###############################################################################
 # Append headers to the server headers list
-MACRO (APPEND_TO_SERVER_HEADERS)
-  FOREACH (src ${ARGN})
-    APPEND_TO_CACHED_LIST(gazeboserver_headers
-                          ${gazeboserver_headers_desc}
-                          ${CMAKE_CURRENT_SOURCE_DIR}/${src})
-    APPEND_TO_CACHED_LIST(gazeboserver_headers_nopath
-                          "gazeboserver_headers_nopath"
-                          ${src})
-  ENDFOREACH (src ${ARGN})
-ENDMACRO (APPEND_TO_SERVER_HEADERS)
+#MACRO (APPEND_TO_SERVER_HEADERS)
+#  FOREACH (src ${ARGN})
+#    APPEND_TO_CACHED_LIST(gazeboserver_headers
+#                          ${gazeboserver_headers_desc}
+#                          ${CMAKE_CURRENT_SOURCE_DIR}/${src})
+#    APPEND_TO_CACHED_LIST(gazeboserver_headers_nopath
+#                          "gazeboserver_headers_nopath"
+#                          ${src})
+#  ENDFOREACH (src ${ARGN})
+#ENDMACRO (APPEND_TO_SERVER_HEADERS)

 ###############################################################################
 # Append sources to the sensor sources list
diff --git a/cmake/SearchForStuff.cmake b/cmake/SearchForStuff.cmake
index b1cb3f37b3..d3cfe92e1c 100644
--- a/cmake/SearchForStuff.cmake
+++ b/cmake/SearchForStuff.cmake
@@ -625,7 +625,7 @@ endif()

 ########################################
 # Find QT
-find_package(Qt5 COMPONENTS Core Widgets OpenGL Test REQUIRED)
+#find_package(Qt5 COMPONENTS Core Widgets OpenGL Test REQUIRED)

 ########################################
 # Find Boost, if not specified manually
@@ -639,23 +639,23 @@ endif()

 ########################################
 # Find libdl
-find_path(libdl_include_dir dlfcn.h /usr/include /usr/local/include)
-if (NOT libdl_include_dir)
-  message (STATUS "Looking for dlfcn.h - not found")
-  BUILD_ERROR ("Missing libdl: Required for plugins.")
-  set (libdl_include_dir /usr/include)
-else (NOT libdl_include_dir)
-  message (STATUS "Looking for dlfcn.h - found")
-endif ()
+#find_path(libdl_include_dir dlfcn.h /usr/include /usr/local/include)
+#if (NOT libdl_include_dir)
+#  message (STATUS "Looking for dlfcn.h - not found")
+#  BUILD_ERROR ("Missing libdl: Required for plugins.")
+#  set (libdl_include_dir /usr/include)
+#else (NOT libdl_include_dir)
+#  message (STATUS "Looking for dlfcn.h - found")
+#endif ()

-find_library(libdl_library dl /usr/lib /usr/local/lib)
-if (NOT libdl_library)
-  message (STATUS "Looking for libdl - not found")
-  BUILD_ERROR ("Missing libdl: Required for plugins.")
-  set(libdl_library "")
-else (NOT libdl_library)
-  message (STATUS "Looking for libdl - found")
-endif ()
+#find_library(libdl_library dl /usr/lib /usr/local/lib)
+#if (NOT libdl_library)
+#  message (STATUS "Looking for libdl - not found")
+#  BUILD_ERROR ("Missing libdl: Required for plugins.")
+#  set(libdl_library "")
+#else (NOT libdl_library)
+#  message (STATUS "Looking for libdl - found")
+#endif ()

 ########################################
 # Find gdal
@@ -847,48 +847,48 @@ endif()

 ########################################
 # Find QWT (QT graphing library)
-find_path(QWT_INCLUDE_DIR NAMES qwt.h PATHS
-  /usr/include
-  /usr/local/include
-  /usr/local/lib/qwt.framework/Headers
-  ${QWT_WIN_INCLUDE_DIR}
-
-  PATH_SUFFIXES qwt qwt5
-)
-
-find_library(QWT_LIBRARY NAMES qwt-qt5 qwt PATHS
-  /usr/local/lib
-  /usr/local/lib/qwt.framework
-  ${QWT_WIN_LIBRARY_DIR}
-)
+#find_path(QWT_INCLUDE_DIR NAMES qwt.h PATHS
+#  /usr/include
+#  /usr/local/include
+#  /usr/local/lib/qwt.framework/Headers
+#  ${QWT_WIN_INCLUDE_DIR}
+#
+#  PATH_SUFFIXES qwt qwt5
+#)
+
+#find_library(QWT_LIBRARY NAMES qwt-qt5 qwt PATHS
+#  /usr/local/lib
+#  /usr/local/lib/qwt.framework
+#  ${QWT_WIN_LIBRARY_DIR}
+#)

 # version
-set ( _VERSION_FILE ${QWT_INCLUDE_DIR}/qwt_global.h )
-file ( STRINGS ${_VERSION_FILE} _VERSION_LINE REGEX "define[ ]+QWT_VERSION_STR" )
-if ( _VERSION_LINE )
-  string ( REGEX REPLACE ".*define[ ]+QWT_VERSION_STR[ ]+\"(.*)\".*" "\\1"
-      QWT_VERSION_STRING "${_VERSION_LINE}" )
-  string ( REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1"
-      QWT_MAJOR_VERSION "${QWT_VERSION_STRING}" )
-  string ( REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\2"
-      QWT_MINOR_VERSION "${QWT_VERSION_STRING}" )
-  string ( REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\3"
-      QWT_PATCH_VERSION "${QWT_VERSION_STRING}" )
-  set(QWT_VERSION
-    ${QWT_MAJOR_VERSION}.${QWT_MINOR_VERSION}.${QWT_PATCH_VERSION})
-endif ()
+#set ( _VERSION_FILE ${QWT_INCLUDE_DIR}/qwt_global.h )
+#file ( STRINGS ${_VERSION_FILE} _VERSION_LINE REGEX "define[ ]+QWT_VERSION_STR" )
+#if ( _VERSION_LINE )
+#  string ( REGEX REPLACE ".*define[ ]+QWT_VERSION_STR[ ]+\"(.*)\".*" "\\1"
+#      QWT_VERSION_STRING "${_VERSION_LINE}" )
+#  string ( REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1"
+#      QWT_MAJOR_VERSION "${QWT_VERSION_STRING}" )
+#  string ( REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\2"
+#      QWT_MINOR_VERSION "${QWT_VERSION_STRING}" )
+#  string ( REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\3"
+#      QWT_PATCH_VERSION "${QWT_VERSION_STRING}" )
+#  set(QWT_VERSION
+#    ${QWT_MAJOR_VERSION}.${QWT_MINOR_VERSION}.${QWT_PATCH_VERSION})
+#endif ()

 # in Windows, the path need to point to the parent to get correct qwt/foo headers
 if (WIN32)
   SET(QWT_INCLUDE_DIR "${QWT_INCLUDE_DIR}\\..")
 endif()

-if (QWT_INCLUDE_DIR AND QWT_LIBRARY AND (NOT ${QWT_VERSION} VERSION_LESS 6.1.0))
-  message (STATUS "Looking for qwt - found: version ${QWT_VERSION}")
-else()
-  message (STATUS "Looking for qwt >= 6.1.0 - not found")
-  BUILD_ERROR ("Missing: libqwt-dev. Required for plotting.")
-endif ()
+#if (QWT_INCLUDE_DIR AND QWT_LIBRARY AND (NOT ${QWT_VERSION} VERSION_LESS 6.1.0))
+#  message (STATUS "Looking for qwt - found: version ${QWT_VERSION}")
+#else()
+#  message (STATUS "Looking for qwt >= 6.1.0 - not found")
+#  BUILD_ERROR ("Missing: libqwt-dev. Required for plotting.")
+#endif ()

 ########################################
 # On Windows, find tiny-process-library
diff --git a/gazebo/CMakeLists.txt b/gazebo/CMakeLists.txt
index 9ad9d02a7a..e31924e795 100644
--- a/gazebo/CMakeLists.txt
+++ b/gazebo/CMakeLists.txt
@@ -34,116 +34,116 @@ if (WIN32)
 endif()

 add_subdirectory(msgs)
-add_subdirectory(transport)
 add_subdirectory(common)
-add_subdirectory(rendering)
-add_subdirectory(gui)
-add_subdirectory(physics)
-add_subdirectory(sensors)
-add_subdirectory(util)
-add_subdirectory(test)
-
-add_dependencies(gazebo_physics gazebo_msgs)
-add_dependencies(gazebo_gui gazebo_msgs)
-add_dependencies(gazebo_rendering gazebo_msgs)
-add_dependencies(gazebo_sensors gazebo_rendering)
-
-gz_add_executable(gzserver server_main.cc)
+#add_subdirectory(transport)
+#add_subdirectory(rendering)
+#add_subdirectory(gui)
+#add_subdirectory(physics)
+#add_subdirectory(sensors)
+#add_subdirectory(util)
+#add_subdirectory(test)
+
+#add_dependencies(gazebo_physics gazebo_msgs)
+#add_dependencies(gazebo_gui gazebo_msgs)
+#add_dependencies(gazebo_rendering gazebo_msgs)
+#add_dependencies(gazebo_sensors gazebo_rendering)
+
+#gz_add_executable(gzserver server_main.cc)

 if (${ENABLE_PROFILER})
   set(IGN_PROFILE_LIBS ${IGNITION-COMMON_LIBRARIES})
 endif()

-target_link_libraries(gzserver
-  libgazebo
-  gazebo_common
-  gazebo_util
-  gazebo_transport
-  gazebo_physics
-  gazebo_sensors
-  gazebo_rendering
-  gazebo_msgs
-  # Extra libs needed when linking statically (e.g., on WIN32)
-  ${freeimage_LIBRARIES}
-  ${TBB_LIBRARIES}
-  ${ogre_libraries}
-  ${IGN_PROFILE_LIBS}
-)
+#target_link_libraries(gzserver
+#  libgazebo
+#  gazebo_common
+#  gazebo_util
+#  gazebo_transport
+#  gazebo_physics
+#  gazebo_sensors
+#  gazebo_rendering
+#  gazebo_msgs
+#  # Extra libs needed when linking statically (e.g., on WIN32)
+#  ${freeimage_LIBRARIES}
+#  ${TBB_LIBRARIES}
+#  ${ogre_libraries}
+#  ${IGN_PROFILE_LIBS}
+#)

 if (UNIX)
-  target_link_libraries(gzserver pthread)
+  #target_link_libraries(gzserver pthread)
 endif()

 if ("${CMAKE_BUILD_TYPE}" STREQUAL "CHECK")
   target_link_libraries(gzserver gcov)
 endif()

-gz_install_executable(gzserver)
-manpage(gzserver 1)
-
-
-gz_add_executable(gazebo gazebo_main.cc)
-target_link_libraries(gazebo
-  libgazebo
-  libgazebo_client
-  gazebo_common
-  gazebo_util
-  gazebo_transport
-  gazebo_physics
-  gazebo_sensors
-  gazebo_rendering
-  gazebo_msgs
-  gazebo_gui
-)
+#gz_install_executable(gzserver)
+#manpage(gzserver 1)
+
+
+#gz_add_executable(gazebo gazebo_main.cc)
+#target_link_libraries(gazebo
+#  libgazebo
+#  libgazebo_client
+#  gazebo_common
+#  gazebo_util
+#  gazebo_transport
+#  gazebo_physics
+#  gazebo_sensors
+#  gazebo_rendering
+#  gazebo_msgs
+#  gazebo_gui
+#)

 if(WIN32)
   target_link_libraries(gazebo tiny-process-library::tiny-process-library)
 endif()

-gz_install_executable(gazebo)
-manpage(gazebo 1)
+#gz_install_executable(gazebo)
+#manpage(gazebo 1)


-gz_add_library(libgazebo Server.cc Master.cc gazebo.cc gazebo_shared.cc)
+#gz_add_library(libgazebo Server.cc Master.cc gazebo.cc gazebo_shared.cc)

 # On Windows calling libgazebo "gazebo" will conflict with the Gazebo executable
 if (NOT WIN32)
-  set_target_properties(libgazebo PROPERTIES OUTPUT_NAME "gazebo")
+  #set_target_properties(libgazebo PROPERTIES OUTPUT_NAME "gazebo")
 endif()

-target_link_libraries(libgazebo
-  gazebo_common
-  gazebo_util
-  gazebo_transport
-  gazebo_physics
-  gazebo_sensors
-  gazebo_rendering
-  gazebo_msgs
-)
+#target_link_libraries(libgazebo
+#  gazebo_common
+#  gazebo_util
+#  gazebo_transport
+#  gazebo_physics
+#  gazebo_sensors
+#  gazebo_rendering
+#  gazebo_msgs
+#)
 if (UNIX)
-  target_link_libraries(libgazebo pthread)
+  #target_link_libraries(libgazebo pthread)
 endif()

-add_dependencies(libgazebo gazebo_msgs)
-gz_install_library(libgazebo)
+#add_dependencies(libgazebo gazebo_msgs)
+#gz_install_library(libgazebo)

-gz_add_library(libgazebo_client gazebo_client.cc gazebo_shared.cc)
-set_target_properties(libgazebo_client PROPERTIES OUTPUT_NAME "gazebo_client")
-target_link_libraries(libgazebo_client
-  gazebo_common
-  gazebo_transport
-  gazebo_util
-)
+#gz_add_library(libgazebo_client gazebo_client.cc gazebo_shared.cc)
+#set_target_properties(libgazebo_client PROPERTIES OUTPUT_NAME "gazebo_client")
+#target_link_libraries(libgazebo_client
+#  gazebo_common
+#  gazebo_transport
+#  gazebo_util
+#)
 if (UNIX)
-  target_link_libraries(libgazebo_client pthread)
+  #target_link_libraries(libgazebo_client pthread)
 endif()
-gz_install_library(libgazebo_client)
-
-set(headers
-  gazebo_client.hh
-  gazebo_core.hh
-  gazebo.hh
-  Master.hh
-  Server.hh
-)
-gz_install_includes("" ${headers})
+#gz_install_library(libgazebo_client)
+
+#set(headers
+#  gazebo_client.hh
+#  gazebo_core.hh
+#  gazebo.hh
+#  Master.hh
+#  Server.hh
+#)
+#gz_install_includes("" ${headers})
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 6d09a11d0f..1c1710b094 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_definitions(${QT_DEFINITIONS})
+#add_definitions(${QT_DEFINITIONS})

 include_directories(
   ${tinyxml_INCLUDE_DIRS}

